fun render(chars: CharSequence): SpannableStringBuilder {
    val ssb = SpannableStringBuilder(chars)
    for (i in 0 until ssb.length) {
        val delta = when {
            ssb[i] in left -> LEFT_DELTA
            ssb[i] in right -> RIGHT_DELTA
            ssb[i] in mid -> DEFAULT_DELTA
            else -> null
        }
        delta?.apply {
            ssb.setSpan(MyAbsoluteSizeSpan(delta = this), i, i + 1, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
        }
    }
    return ssb
}

class MyAbsoluteSizeSpan(private val delta: Int = DEFAULT_DELTA, private val times: Float = 0.3F) : ReplacementSpan() {
    
    override fun getSize(paint: Paint, text: CharSequence?, start: Int, end: Int, fm: Paint.FontMetricsInt?): Int {
        val rect = Rect()
        val s = text?.substring(start, end) ?: ""
        paint.getTextBounds(s, 0, s.length, rect)
        return rect.right - rect.left + (paint.textSize * times).toInt()
    }

    override fun draw(canvas: Canvas, text: CharSequence?, start: Int, end: Int, x: Float, top: Int, y: Int, bottom: Int, paint: Paint) {
        text?.apply {
            val rect = Rect()
            val s = this.substring(start, end)
            paint.getTextBounds(s, 0, s.length, rect)
            val delta = when (delta) {
                DEFAULT_DELTA -> paint.textSize * DEFAULT_SCALE * times
                LEFT_DELTA -> paint.textSize * LEFT_SCALE * times
                RIGHT_DELTA -> paint.textSize * RIGHT_SCALE * times
                else -> paint.textSize * MID_SCALE * times
            }
            canvas.drawText(this, start, end, x - rect.left + delta, y.toFloat(), paint)
        }
    }

    companion object {
        const val DEFAULT_DELTA = 0
        const val MID_DELTA = 0
        const val LEFT_DELTA = 1
        const val RIGHT_DELTA = 2

        private const val LEFT_SCALE = 1F / 3
        private const val RIGHT_SCALE = 1F / 3 * 2
        private const val MID_SCALE = 1F / 2
        private const val DEFAULT_SCALE = 1F / 2
    }
}

val left = hashSetOf('【', '[', '(', '「')
val right = hashSetOf('】', ']', ')', '」')
val mid = hashSetOf(',', '，', '!')
